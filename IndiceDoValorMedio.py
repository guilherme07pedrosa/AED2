#Escreva um algoritmo de divis√£o e conquista para encontrar a posi√ß√£o (√≠ndice) do elemento de valor m√©dio em um array n√£o ordenado com ùëõ inteiros.
#Apresente o algoritmo em pseudoc√≥digo, a implementa√ß√£o do algoritmo em Python ou C/C++ e analise a complexidade do seu algoritm

#cria um vetor vazio
vetor=[]

#loop para o usu√°rio ir digitando valoes e ir entrando no valores e ir entrando em um vetor
while True:
    #Entrada do nn√∫mero 
    # Dentro do loop para entrada de n√∫meros
    numero = input("\nDigite um numero ou tecla a tecla 'S' do teclado para parar: ")
    # converte 'S' para 's' e 's' mantem em 's'
    if numero.lower()=='s':                                                               
        #sai do loop
        break                                                                            
    
    #tratamento da excess√£o para que o usu√°rio s√≥ digite n√∫meros ou apenas a string 'S'ou 's'
    try:
        #Entrada do n√∫mero e convesr√£o deste em float para evitar problemas no c√°lculo de m√©dia
        numero=float(numero)
        #Inser e uma posi√ß√£o a mais do vetor - o n√∫mero √© inserido na √∫ltima posi√ß√£o
        vetor.append(numero)
    #se o usu√°rio digitar uma tecla que n√£o seja um n√∫mero ou 
    except ValueError:
        print("\nDigite a tecla 'S' ou um numero ")

#imprime o vetor resultante
print ("\nVetor resultante: ", vetor)



#calcular a media
def media(v):
    soma = sum(v)
    media = soma / len(v)
    return media






# usar a tecnica de dividir para conquistar comparando a lado esquerdo e ladop direito

def IndiceDoValorMedio(v, m):
   #caso base 
    if len(v)==1:
        return 0
    
   #parti√ß√£o do lados
    meio=len(v)//2
    lado_E=v[:meio]
    lado_D=v[meio:]

    #Achar o indice de  menor diferen√ßa entre a m√©dia e o lado esquerdo
    #OBS: chamada recursiva at√© o caso base
    indice_E=IndiceDoValorMedio(lado_E, m)

    #Achar o indice de menor diferen√ßa entre a m√©dia e o lado direito
    #OBS: chamada recursiva at√© o caso base
    indice_D=IndiceDoValorMedio(lado_D, m)

    #Menor diferen√ßa entre os valores da esquerda
    diferenca_E=abs(v[indice_E]-m)

    #Menor diferen√ßa entre os valores da direita
    diferenca_D=abs(v[indice_D]-m)

    if diferenca_E<diferenca_D:
        return indice_E
    else:
        return (indice_D+meio)
        










# usar a tecnica de dividir para conquistar comparando a lado esquerdo e ladop direito

def IndiceDoValorMedio(v, m):
   #caso base 
    if len(v)==1:
        return 0
    
   #parti√ß√£o do lados
    meio=len(v)//2
    lado_E=v[:meio]
    lado_D=v[meio:]

    #Achar o indice de  menor diferen√ßa entre a m√©dia e o lado esquerdo
    #OBS: chamada recursiva at√© o caso base
    indice_E=IndiceDoValorMedio(lado_E, m)

    #Achar o indice de menor diferen√ßa entre a m√©dia e o lado direito
    #OBS: chamada recursiva at√© o caso base
    indice_D=IndiceDoValorMedio(lado_D, m)

    #Menor diferen√ßa entre os valores da esquerda
    diferenca_E=abs(v[indice_E]-m)

    #Menor diferen√ßa entre os valores da direita
    diferenca_D=abs(v[indice_D]-m)

    if diferenca_E<diferenca_D:
        return indice_E
    else:
        return (indice_D+meio)
        


# Resultados
#v = vetor
v=[1,2,3]

if len(v) == 0:
    print("\nN√£o √© poss√≠vel calcular a m√©dia de um vetor vazio.")
else:
    m = media(v)
    print("\nA m√©dia dos valores √©:", m)
    indice = IndiceDoValorMedio(v, m)
    print(f"O valor mais pr√≥ximo da m√©dia est√° no √≠ndice {indice}: {v[indice]}")
    

